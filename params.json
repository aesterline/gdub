{"name":"gdub","tagline":"A gradlew / gradle wrapper.","body":"# What's gdub?\r\n\r\ngdub (`gw` on the command line) is a `gradle` / `gradlew` wrapper. This is \r\nnot to be confused with the [Gradle Wrapper](http://www.gradle.org/). gdub\r\nactually uses the Gradle Wrapper on projects where one is configured, but \r\nfalls back to use the system-installed Gradle if a wrapper is not availble.\r\n\r\n## The problems with `gradle` and `gradlew`\r\n\r\ngdub is a convienence for developers running local gradle commands and addresses\r\na few minor shortcomings of `gradle` and `gradlew`'s commandline behaviour. These\r\nare known issues, and they are set to be addressed in future versions of Gradle. If\r\nyou are interested in the discussions surrounding them, check out:\r\n\r\n  - [Issue GRADLE-2429](http://issues.gradle.org/browse/GRADLE-2429)\r\n  - [Spencer Allain's Gradle Forum Post](http://forums.gradle.org/gradle/topics/gradlew_scripts_in_gradle_bin_to_find_gradlew_scripts_upwards_within_project_space)\r\n  - [Phil Swenson's Gradle Forum Post](http://forums.gradle.org/gradle/topics/is_there_a_way_to_make_gradlew_available_within_all_sub_directories)\r\n\r\nHere are the issues I feel are most important, and the ones gdub attempts to\r\naddress:\r\n\r\n### You have to provide a relative path to `build.gradle`\r\n\r\nIf you are using the `gradle` command, and you are not in the same directory\r\nas the `build.gradle` file you want to run, you have to provide `gradle` the path.\r\nDepending on where you happen to be, this can be somewhat cumbersome:\r\n\r\n    ~/myProject/src/main/java/org/project/stuff$ gradle -b ../../../../../../build.gradle build\r\n    # Or maybe:\r\n    ~/myProject/src/main/java/org/project/stuff$ gradle -b ~/myProject/build.gradle build    \r\n\r\nWith `gw`, this becomes:\r\n\r\n    ~/myProject/src/main/java/org/project/stuff$ gw build\r\n\r\n### You have to provide a relative path to `gradlew`\r\n\r\nIf you are using `gradlew` and you want to run your build, you need to do\r\nsomething similiar and provide the relative path to the `gradlew` script:\r\n\r\n    ~/myProject/src/main/java/org/project/stuff$ ../../../../../../gradlew build\r\n\r\nAgain, with `gw` this becomes:\r\n\r\n    ~/myProject/src/main/java/org/project/stuff$ gw build\r\n\r\n### You have a combination of the above problems\r\n\r\nI don't even want to type out an example of this, let alone do it on a\r\nday-to-day basis. Use your imagination.\r\n\r\n### Typing `./gradlew` to run the gradle wrapper is kind of inconvenient\r\n\r\nEven with tab completion and sitting at the root of your project, you have to\r\ntype at least `./gr<tab>`. It gets a bit worse if you happen to have a\r\n`gradle.properties` file, and with the gradle wrapper, you have a `gradle`\r\ndirectory to contend with as well. A simple alias would solve this problem, but\r\nyou still have the other (more annoying) issues to contend with.\r\n\r\n### You meant to use the project's `gradlew`, but typed `gradle` instead\r\n\r\nThis can be a problem if the project you are building has customizations to the\r\ngradle wrapper or for some reason is only compatible with a certain version of\r\ngradle that is configured in the wrapper. If you know the project uses gradle, \r\nyou may be tempted to just use your own system's gradle binary. This might be ok,\r\nor it might cause the build to break, but if a project has a `gradlew`, it is a \r\npretty safe bet you should use it, and not whatever Gradle distribution you \r\nhappen to have installed on your system.\r\n\r\n## The `gw` payoff\r\n\r\nAnywhere you happen to be on your project, you can run the gradle tasks of your\r\nproject by typing `gw <tasks>`, regardless of whether you use the Gradle Wrapper\r\nin your project or not.\r\n\r\n`gw` works by looking upwards from your current directory and will run the\r\nnearest `build.gradle` file with the nearest `gradlew`. If a `gradlew` cannot\r\nbe found, it will run the nearest `build.gradle` with your system's gradle. This\r\nis probably always what you want to do if you are running gradle from within a\r\nproject's tree that uses the Gradle build system.\r\n\r\n# Installing gdub from source\r\n\r\nYou will probably want to install [Gradle](http://www.gradle.org) first. While\r\nthis is not technically necessary if all your projects are using a Gradle\r\nWrapper, it is a good idea to have Gradle available system-wide because some\r\nhandy Gradle features are available outside the context of an existing project.\r\n\r\nCheck out a copy of the gdub repository. Then, either add the gdub `bin`\r\ndirectory to your `$PATH`, or run the provided `install` command with the\r\nlocation to the prefix in which you want to install gdub.\r\n\r\nFor example, to install gdub into `/usr/local`:\r\n\r\n    $ git clone https://github.com/dougborg/gdub.git\r\n    $ cd gdub\r\n    $ ./install /usr/local\r\n\r\nNote that you may need to run `install` with `sudo` if you do not have\r\npermission to write to the installation prefix.\r\n\r\n## Aliasing the `gradle` command\r\nFor maximum fidelity add a `gradle` alias to `gw` to your shell's configuration file.\r\n\r\nExample *bash*:\r\n\r\n```bash\r\necho \"alias gradle=gw\" >> ~/.bashrc\r\nsource ~/.bashrc\r\n```\r\n\r\nFrom now on you can just type `gradle ...` from wherever you are and `gw` takes care of the rest. Happiness ensues!\r\n","google":"UA-35143181-2","note":"Don't delete this file! It's used internally to help with page regeneration."}